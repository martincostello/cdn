name: deploy

on:
  push:
    branches: [ main, deploy ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ARTIFACT_NAME: content
  FORCE_COLOR: 3
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    env:
      STAGING_DIRECTORY: _staging

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Create version file
      shell: pwsh
      run: |
        New-Item "${env:STAGING_DIRECTORY}" -Type Directory -Force
        New-Item (Join-Path "${env:STAGING_DIRECTORY}" "version.txt") -Type File -Value "${env:GITHUB_SHA} from ${env:GITHUB_REF_NAME} (${env:GITHUB_RUN_ID})`r`n" -Force

    - name: Create content
      shell: pwsh
      run: |
        $root = Resolve-Path "content"
        [IO.Directory]::GetFiles($root.Path, "*.*", 'AllDirectories') | ForEach-Object { Copy-Item $_ -Destination (Join-Path "${env:STAGING_DIRECTORY}" ($_.Substring($root.Path.Length + 1).ToLowerInvariant().Replace("\", "_"))) }

    - name: Publish content
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./${{ env.STAGING_DIRECTORY }}
        if-no-files-found: error

  lint:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint:1.7.7
      with:
        args: -color

    - name: Lint PowerShell in workflows
      uses: martincostello/lint-actions-powershell@v1
      with:
        treat-warnings-as-errors: true

    - name: Lint PowerShell scripts
      shell: pwsh
      run: |
        $settings = @{
          IncludeDefaultRules = $true
          Severity = @("Error", "Warning")
        }
        $issues = Invoke-ScriptAnalyzer -Path ${env:GITHUB_WORKSPACE} -Recurse -ReportSummary -Settings $settings
        foreach ($issue in $issues) {
          $severity = $issue.Severity.ToString()
          $level = $severity.Contains("Error") ? "error" : $severity.Contains("Warning") ? "warning" : "notice"
          Write-Output "::${level} file=$($issue.ScriptName),line=$($issue.Line),title=PSScriptAnalyzer::$($issue.Message)"
        }
        if ($issues.Count -gt 0) {
          exit 1
        }

  deploy-azure:
    if: github.event.repository.fork == false && github.ref_name == 'deploy'
    needs: [ build, lint ]
    runs-on: ubuntu-latest

    concurrency: azure-cdn

    environment:
      name: azure
      url: https://cdn.martincostello.com

    permissions:
      id-token: write

    steps:

    - name: Download content
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: Azure log in
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Upload to Azure Blob Storage
      uses: azure/CLI@v2
      with:
        inlineScript: |
          az storage blob upload-batch --account-name 'martincostellocdnuk' --destination '$root' --overwrite --source .

  deploy-aws:
    if: github.event.repository.fork == false && github.ref_name == 'deploy'
    needs: [ build, lint ]
    runs-on: ubuntu-latest

    concurrency: aws-cdn

    environment:
      name: aws
      url: http://cdn.martincostello.com.s3-eu-west-1.amazonaws.com

    permissions:
      id-token: write

    steps:

    - name: Download content
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
        role-session-name: ${{ github.event.repository.name }}-${{ github.run_id }}-deploy
        aws-region: eu-west-1

    - name: Deploy to S3
      run: aws s3 sync . s3://cdn.martincostello.com --cache-control 'max-age=604800' --delete

    - name: Create CloudFront invalidation
      shell: pwsh
      env:
        DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      run: |
        $invalidationId = aws cloudfront create-invalidation --distribution-id ${env:DISTRIBUTION_ID} --paths "/*" --output text --query "Invalidation.Id"
        aws cloudfront wait invalidation-completed --distribution-id ${env:DISTRIBUTION_ID} --id $invalidationId
