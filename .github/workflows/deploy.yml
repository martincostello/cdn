name: deploy

on:
  push:
    branches: [ main, deploy ]
    paths-ignore:
      - '**/*.gitattributes'
      - '**/*.gitignore'
      - '**/*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ARTIFACT_NAME: content
  FORCE_COLOR: 3
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    env:
      STAGING_DIRECTORY: _staging

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Create version file
      shell: pwsh
      run: |
        New-Item "${env:STAGING_DIRECTORY}" -Type Directory -Force
        New-Item (Join-Path "${env:STAGING_DIRECTORY}" "version.txt") -Type File -Value "${env:GITHUB_SHA} from ${env:GITHUB_REF_NAME} (${env:GITHUB_RUN_ID})`r`n" -Force

    - name: Create content
      shell: pwsh
      run: |
        $root = Resolve-Path "content"
        [IO.Directory]::GetFiles($root.Path, "*.*", 'AllDirectories') | % { Copy-Item $_ -Destination (Join-Path "${env:STAGING_DIRECTORY}" ($_.Substring($root.Path.Length + 1).ToLowerInvariant().Replace("\", "_"))) }

    - name: Publish content
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./${{ env.STAGING_DIRECTORY }}
        if-no-files-found: error

  lint:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add actionlint problem matcher
      run: echo "::add-matcher::.github/actionlint-matcher.json"

    - name: Lint workflows
      uses: docker://rhysd/actionlint@sha256:d1b3d067b912ea4cbf697750cee80f59114414365b916167b4c7b4cf9504ca9a # v1.7.5
      with:
        args: -color

  deploy:
    if: github.event.repository.fork == false && github.ref_name == 'deploy'
    needs: [ build, lint ]
    runs-on: ubuntu-latest
    concurrency: azure-cdn

    env:
      STORAGE_ACCOUNT_NAME: martincostellocdnuk
      STORAGE_CONTAINER_NAME: $root

    permissions:
      id-token: write

    steps:

    - name: Download content
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}

    - name: Azure log in
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Upload to Azure Blob Storage
      uses: azure/CLI@v2
      with:
        inlineScript: |
          az storage blob upload-batch --account-name '${{ env.STORAGE_ACCOUNT_NAME }}' --destination '${{ env.STORAGE_CONTAINER_NAME }}' --overwrite --source .
